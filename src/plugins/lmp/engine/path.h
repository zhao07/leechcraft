/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <functional>
#include <QObject>

typedef struct _GstElement GstElement;
typedef struct _GstMessage GstMessage;
typedef struct _GstBus GstBus;

namespace LeechCraft
{
namespace LMP
{
	class SourceObject;
	class Output;
	struct CallbackData;

	typedef std::function<int (GstBus*, GstMessage*)> SyncHandler_f;

	class Path : public QObject
	{
		SourceObject * const SrcObj_;

		GstElement * const WholeBin_;
		GstElement * const Identity_;

		GstElement *Pipeline_;
		GstElement *OutputBin_;

		QList<GstElement*> NextWholeElems_;

		enum class Action
		{
			Add,
			Remove
		};

		friend struct CallbackData;

		struct QueueItem
		{
			GstElement *Elem_;
			Action Act_;
		};
		QList<QueueItem> Queue_;
	public:
		Path (SourceObject*, Output*, QObject* = 0);
		~Path ();

		GstElement* GetPipeline () const;
		void SetPipeline (GstElement*);

		GstElement* GetOutPlaceholder () const;
		GstElement* GetWholeOut () const;

		GstElement* GetOutputBin () const;
		void SetOutputBin (GstElement*);

		SourceObject* GetSourceObject () const;

		void AddSyncHandler (const SyncHandler_f&);

		void InsertElement (GstElement*);
		void RemoveElement (GstElement*);

		void FinalizeAction (CallbackData*);
	private:
		void RotateQueue ();
	};
}
}
