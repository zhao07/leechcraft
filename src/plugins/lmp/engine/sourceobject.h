/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <QObject>
#include <QStringList>
#include <QMap>
#include <QMutex>
#include <QWaitCondition>
#include "audiosource.h"
#include "pathelement.h"
#include "gstutil.h"
#include "path.h"

typedef struct _GstElement GstElement;
typedef struct _GstPad GstPad;
typedef struct _GstMessage GstMessage;
typedef struct _GstBus GstBus;

typedef std::shared_ptr<GstMessage> GstMessage_ptr;

namespace LeechCraft
{
namespace LMP
{
	class AudioSource;
	class Path;

	enum class SourceError
	{
		MissingPlugin,
		SourceNotFound,
		Other
	};

	enum class SourceState
	{
		Error,
		Stopped,
		Paused,
		Buffering,
		Playing
	};

	enum class Category
	{
		Music,
		Notification
	};

	class MsgPopThread;

	class Path;

	class SourceObject : public QObject
	{
		Q_OBJECT

		friend class Path;

		GstElement *Dec_;

		Path *Path_;

		AudioSource CurrentSource_;
		AudioSource NextSource_;

		QMutex NextSrcMutex_;
		QWaitCondition NextSrcWC_;

		bool IsSeeking_;

		qint64 LastCurrentTime_;

		uint PrevSoupRank_;

		QMutex BusDrainMutex_;
		QWaitCondition BusDrainWC_;
		bool IsDrainingMsgs_ = false;

		MsgPopThread *PopThread_;
		GstUtil::TagMap_t Metadata_;

		QList<SyncHandler_f> SyncHandlers_;
	public:
		enum class Metadata
		{
			Artist,
			Album,
			Title,
			Genre,
			Tracknumber,
			NominalBitrate,
			MinBitrate,
			MaxBitrate
		};
	private:
		SourceState OldState_;
	public:
		SourceObject (Category, QObject* = 0);
		~SourceObject ();

		SourceObject (const SourceObject&) = delete;
		SourceObject& operator= (const SourceObject&) = delete;

		bool IsSeekable () const;
		SourceState GetState () const;

		QString GetErrorString () const;

		QString GetMetadata (Metadata) const;

		qint64 GetCurrentTime ();
		qint64 GetRemainingTime () const;
		qint64 GetTotalTime () const;
		void Seek (qint64);

		AudioSource GetCurrentSource () const;
		void SetCurrentSource (const AudioSource&);
		void PrepareNextSource (const AudioSource&);

		void Play ();
		void Pause ();
		void Stop ();

		void Clear ();
		void ClearQueue ();

		void HandleAboutToFinish ();

		void SetupSource ();

		void AddToPath (Path*);
		void SetSink (GstElement*);

		void AddSyncHandler (const SyncHandler_f&);
	private:
		void HandleErrorMsg (GstMessage*);
		void HandleTagMsg (GstMessage*);
		void HandleBufferingMsg (GstMessage*);
		void HandleStateChangeMsg (GstMessage*);
		void HandleElementMsg (GstMessage*);
		void HandleEosMsg (GstMessage*);
		void HandleStreamStatusMsg (GstMessage*);

		int HandleSyncMessage (GstBus*, GstMessage*);
	private slots:
		void handleMessage (GstMessage_ptr);
		void updateTotalTime ();
		void handleTick ();
	signals:
		void stateChanged (SourceState, SourceState);
		void currentSourceChanged (const AudioSource&);
		void aboutToFinish ();
		void finished ();
		void metaDataChanged ();
		void bufferStatus (int);
		void totalTimeChanged (qint64);

		void tick (qint64);

		void error (const QString&, SourceError);
	};
}
}
