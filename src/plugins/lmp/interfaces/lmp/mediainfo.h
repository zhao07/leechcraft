/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QStringList>
#include <QMetaType>
#include <interfaces/media/audiostructs.h>

namespace LeechCraft
{
namespace LMP
{
	struct MediaInfo
	{
		QString LocalPath_;

		QString Artist_;
		QString Album_;
		QString Title_;

		QStringList Genres_;

		qint32 Length_ = 0;
		qint32 Year_ = 0;
		qint32 TrackNumber_ = 0;

		QVariantMap Additional_;

		MediaInfo () = default;
		MediaInfo (const MediaInfo&) = default;

		MediaInfo (const QString& localPath,
				const QString& artist, const QString& album, const QString& title,
				const QStringList& genres,
				qint32 length, qint32 year, qint32 trackNumber);

		MediaInfo& operator= (const Media::AudioInfo&);

		bool IsUseless () const;

		operator Media::AudioInfo () const;

		static MediaInfo FromAudioInfo (const Media::AudioInfo&);
	};

	inline bool operator== (const MediaInfo& l, const MediaInfo& r)
	{
		return l.LocalPath_ == r.LocalPath_ &&
			l.Artist_ == r.Artist_ &&
			l.Album_ == r.Album_ &&
			l.Title_ == r.Title_ &&
			l.Genres_ == r.Genres_ &&
			l.Length_ == r.Length_ &&
			l.Year_ == r.Year_ &&
			l.TrackNumber_ == r.TrackNumber_;
	}

	inline bool operator!= (const MediaInfo& l, const MediaInfo& r)
	{
		return !(l == r);
	}

	QDataStream& operator<< (QDataStream&, const MediaInfo&);
	QDataStream& operator>> (QDataStream&, MediaInfo&);
}
}

Q_DECLARE_METATYPE (LeechCraft::LMP::MediaInfo);
