/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QStyledItemDelegate>
#include "core.h"

class QTreeView;

namespace LeechCraft
{
namespace Azoth
{
	class ContactListDelegate : public QStyledItemDelegate
	{
		Q_OBJECT

		bool ShowAvatars_;
		bool ShowClientIcons_;
		bool ShowStatuses_;
		bool HighlightGroups_;
		int ContactHeight_;
		QString ActivityIconset_;
		QString MoodIconset_;
		QString SystemIconset_;
		mutable QHash<QString, QIcon> ActivityIconCache_;
		mutable QHash<QString, QIcon> MoodIconCache_;
		mutable QHash<QString, QIcon> SystemIconCache_;
		QTreeView *View_;
	public:
		ContactListDelegate (QTreeView* = 0);

		virtual void paint (QPainter*,
				const QStyleOptionViewItem&, const QModelIndex&) const;
		virtual QSize sizeHint (const QStyleOptionViewItem&,
				const QModelIndex&) const;
	private:
		void DrawAccount (QPainter*,
				QStyleOptionViewItemV4, const QModelIndex&) const;
		void DrawCategory (QPainter*,
				QStyleOptionViewItemV4, const QModelIndex&) const;
		void DrawContact (QPainter*,
				QStyleOptionViewItemV4, const QModelIndex&) const;

		QList<QIcon> GetContactIcons (const QModelIndex&, ICLEntry*, const QStringList&) const;

		void LoadSystemIcon (const QString&, QList<QIcon>&) const;
	private slots:
		void handleShowAvatarsChanged ();
		void handleShowClientIconsChanged ();
		void handleActivityIconsetChanged ();
		void handleMoodIconsetChanged ();
		void handleSystemIconsetChanged ();
		void handleShowStatusesChanged ();
		void handleHighlightGroupsChanged ();
		void handleContactHeightChanged ();
	signals:
		void hookCollectContactIcons (LeechCraft::IHookProxy_ptr, QObject*, QList<QIcon>&) const;
	};
}
}
